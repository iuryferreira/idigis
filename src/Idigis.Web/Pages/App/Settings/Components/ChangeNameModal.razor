@using Idigis.Shared.Dtos.Requests
@using Idigis.Web.States
@inherits BlazorStateComponent

<div class="modal @Status">
    <div class="modal-background"></div>
    <div class="modal-card">
        <header class="modal-card-head">
            <p class="modal-card-title is-size-5">Nome da Igreja</p>
            <button class="delete" aria-label="close" @onclick="HandleHide"></button>
        </header>

        <section class="modal-card-body">
            <p class="help is-danger has-text-centered mt-5">
                @AnyError
            </p>
            <EditForm EditContext="_context">
                <DataAnnotationsValidator/>
                <div class="columns is-inline-mobile">
                    <div class="column">
                        <div class="field">
                            <div class="control has-icons-left">
                                <InputText @bind-Value="_model.Name" class="input" placeholder="Nome Completo"/>
                                <span class="icon is-small is-left">
                                    <i class="fas fa-signature"></i>
                                </span>
                                <p class="help is-danger has-text-left">
                                    <ValidationMessage class="help" For="() => _model.Name"/>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </section>
        <footer class="modal-card-foot">
            <button class="button is-info" type="submit" @onclick="HandleValidSubmit">Adicionar</button>
            <button class="button" aria-label="close" @onclick="HandleHide">Cancelar</button>
        </footer>
    </div>
</div>

@code {

    private readonly EditChurchRequest _model = new();
    private EditContext _context;
    private ValidationMessageStore _messageStore;
    private string Status => State.ShowChangeNameModal ? "is-active" : "";
    private string AnyError { get; set; } = "";

    ChurchState State => GetState<ChurchState>();

    protected override void OnInitialized()
    {
        _model.Id = State.Church.Id;
        _model.Name = State.Church.Name;
        _context = new(_model);
        _messageStore = new(_context);
        _context.OnValidationRequested += (_, _) => _messageStore.Clear();
        _context.OnFieldChanged += (_, e) => _messageStore.Clear(e.FieldIdentifier);
    }

    private async Task HandleHide()
    {
        _context.MarkAsUnmodified();
        await Mediator.Send(new ChurchState.ToggleModalAction("ChangeName"));
    }

    private async Task HandleValidSubmit()
    {
        if (!_context.Validate())
        {
            return;
        }

        await Mediator.Send(new ChurchState.EditChurchAction(_model));

        if (State.Errors.Count > 0)
        {
            foreach (var error in State.Errors)
            {
                _messageStore.Add(_context.Field(error.Key), error.Message);

                if (error.Key is "AnyError")
                {
                    AnyError = error.Message;
                }
            }
            _context.NotifyValidationStateChanged();
        }
        else
        {
            await Mediator.Send(new ChurchState.LoadStateAction());
            await Mediator.Send(new ChurchState.ToggleModalAction("ChangeName"));
        }
    }

}